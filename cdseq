#!/usr/bin/python3
# the above uses specific Python version; allows script name in top
##!/usr/bin/env python3  
# the above sources Python from $PATH

"""
usage: cdseq [-h] [-t] [-e] [-i] [-c] [-v] [-n] [--introns]
             [--truncate_introns int_length]
             genome annotation

Extract transcript/coding sequences from a genome using an annotation file

positional arguments:
  genome                genome file in FASTA format
  annotation            annotation file in GFF[3]/GTF format

optional arguments:
  -h, --help            show this help message and exit
  -t, --translate       translate the output sequence (default: False)
  -e, --exon            use exons instead of CDS entries to define coding
                        sequence (default: False)
  -i, --isoforms        allow multiple isoforms per gene, instead of only
                        longest (default: False)
  -c, --coord_based_isoforms
                        detect isoforms by overlapping coordindates in
                        addition to shared parent (useful for annotations
                        without gene entries) (default: False)
  -v, --verbose_headers
                        include coordinate info in output headers (default:
                        False)
  -n, --non_coding      include non-coding (intronic, UTR, etc.) sequence;
                        uses only the coordinates of the transcript itself
                        (incompatible with --introns) (default: False)
  --introns             include intron sequences in lowercase (incompatible
                        with -n) (default: False)
  --truncate_introns int_length
                        truncate intron sequences to length {int_length} (or
                        {int_length} -1 if odd) (default: None)

"""

import sys
import argparse
import time
from collections import defaultdict
from operator import itemgetter
from math import floor
from biogl import (
    GxfParse, flex_open, fasta_parse, translate, rev_comp, get_runtime)


def get_subseq(region_seq, start, stop):
    # Correct for 1-based indexing in start and stop
    start -= 1
    # Pull sequence and reverse if necessary
    seq = region_seq[start:stop]

    return seq


def get_transcripts(gff, child_type):
    all_child_types = ('cds', 'exon')
    transcripts = defaultdict(dict)
    feature_info = defaultdict(dict)
    grandparents = defaultdict(dict)
    child_type_found = False
    regions_with_content = set()
    orphans = 0
    with flex_open(gff) as annot:
        for ln, line in enumerate(annot):
            feat = None
            try:
                feat = GxfParse(line, ln)
            except TypeError:
                continue
            if feat.feat_type not in all_child_types:
                info_dict = {
                    'name': feat.name,
                    'strand': feat.strand,
                    # use transcript names as genes if no 
                    # parent field in transcript
                    'parent': feat.parent if feat.parent else feat.name,
                    'coords': (feat.start, feat.stop),
                    'region': feat.region,
                    'inferred': False
                }
                if feat.name not in feature_info[feat.region]:
                    feature_info[feat.region][feat.name] = info_dict
                if feat.name in transcripts[feat.region]:  # made by child; update
                    # don't override existing values with Nones
                    updater = {k: v for k, v in info_dict.items() if v is not None}
                    transcripts[feat.region][feat.name]['info'].update(updater)
                else:
                    transcripts[feat.region][feat.name] = {
                        'info': info_dict,
                        'children': set()}
            elif feat.feat_type == child_type:
                if not child_type_found:
                    child_type_found = True
                parent = feat.parent
                if not parent:
                    orphans += 1
                    continue
                start = feat.start
                stop = feat.stop
                region = feat.region
                if parent not in transcripts[region]:
                    try:
                        parent_info = feature_info[region][parent]
                    except KeyError:
                        parent_info = {
                            'strand': feat.strand,
                            'region': region,
                            'name': parent,
                            'inferred': True,
                            'parent': feat.grandparent,
                            'coords': None,
                        }
                    transcripts[region][parent] = {
                        'info': parent_info,
                        'children': set()}
                if feat.grandparent and parent not in grandparents[region]:
                        grandparents[region][parent] = feat.grandparent
                    # parent_record = transcripts[region][parent]
                    # existing_gp = parent_record['info']['parent']
                    # if existing_gp != feat.grandparent:
                    #     parent_record['info']['parent'] = feat.grandparent
                tr = transcripts[region][parent]
                tr['children'].add((start, stop))
                regions_with_content.add(region)

    if orphans:
        print('[#] Skipped {} orphan {} features'.format(
              orphans, child_type), file=sys.stderr)

    final_transcripts = {}
    for region, trs in transcripts.items():
        if region not in regions_with_content:
            continue
        elif region not in final_transcripts:
            final_transcripts[region] = defaultdict(dict)
        for name, tr in trs.items():
            if not tr['children']:
                continue
            tr['info']['length'] = coding_length(tr['children'])
            # always use the min/max child coordinates to report sequence
            # coordinates in output
            
            # if tr['info']['inferred']:  # need to infer coords from children
            min_coord = min([e[0] for e in tr['children']])
            max_coord = max([e[1] for e in tr['children']])
            tr['info']['coords'] = (min_coord, max_coord)
            # use child grandparent info for transcripts without preexisting
            # parent info (if available)
            if name in grandparents[region] and tr['info']['parent'] == name:
                tr['info']['parent'] = grandparents[region][name]
            final_transcripts[region][name] = tr

    return final_transcripts, child_type_found


def overlap_check(a, b):
    """
    a and b are both (start, stop) coord pairs
    
    """
    lowest = min([a, b], key=lambda x: min(x))
    highest = max([a, b], key=lambda x: min(x))

    return min(highest) <= max(lowest)


def longest_isoforms(transcript_dict, use_coords=False):
    """
    Identifies longest isoforms, and returns a dictionary.
    
    """
    # identify longest isoforms
    # sort by length, then use either gene name or overlap() function 
    # to determine if subsequent transcripts are isoforms of longest 
    # version and skip if they are
    longest_isoforms = {}
    seen_genes = set()
    for region, transcripts in transcript_dict.items():
        if region not in longest_isoforms:
            longest_isoforms[region] = {}
        # coords only have meaning within a given region
        seen_coords = set()
        # sort by longest transcripts first
        
        # if there are transcripts with the same coding length,
        # sorting may be different each time within those equal-length
        # transcripts, which may change the output if a given transcript's 
        # coord span is larger/smaller
        for name, meta in sorted(transcripts.items(), 
        key=lambda x: (-x[1]['info']['length'], x[1]['info']['name'])):
            gene = meta['info']['parent']
            if gene not in seen_genes:
                if use_coords:
                    # skip those overlapping longer transcripts
                    # even if they have unique gene name
                    coords = meta['info']['coords']
                    if any(overlap_check(coords, c) for c in seen_coords):
                        continue
                    seen_coords.add(coords)
                if gene is not None:
                    seen_genes.add(gene)
                # length = coding_length(meta['children'])
                # meta['info']['length'] = length
                longest_isoforms[region][name] = meta
    
    return longest_isoforms


def finalize_transcripts(transcript_dict):
    """
    Reformats transcripts, and returns a dictionary.
    
    """
    finalized = defaultdict(dict)
    for region, transcripts in transcript_dict.items():
        for name, meta in sorted(transcripts.items()):
            # try:
            #     gene = meta['info']['parent']
            # except:
            #     print(name, meta, file=sys.stderr)
            length = coding_length(meta['children'])
            meta['info']['length'] = length
            finalized[region][name] = meta
    
    return finalized


def coding_length(coords):
    return sum([abs(stop-start) + 1 for start, stop in coords])


def get_intron_coords(coord_list):
    '''
    Generate tagged intron coordinates from a list of exon/CDS
    coordinates.

    '''
    i_starts = [c[1] + 1 for c, tag in coord_list[:-1]]
    i_stops = [c[0] - 1 for c, tag in coord_list[1:]]
    i_tags = ['intron'] * len(i_starts)
    intron_coords = list(zip(zip(i_starts, i_stops), i_tags))

    return intron_coords


def get_coding_seq(seq, coord_list, introns=False):
    coord_list = sorted(coord_list)
    coord_list = [(c, 'exon') for c in coord_list]    
    if introns is not False:
        intron_coords = get_intron_coords(coord_list)
        coord_list.extend(intron_coords)
    seq_list = []
    for coord, tag in sorted(coord_list):
        chunk = get_subseq(seq, *coord)
        if introns is True and tag == 'exon':
            # ensure that exonic sequence is upper case if introns
            # are being included to avoid lowercase characters in 
            # the original genome file being confused for introns
            chunk = chunk.upper()
        if tag == 'intron':
            chunk = chunk.lower()
            if INTRON_LENGTH and len(chunk) > INTRON_LENGTH:
                chunk = chunk[:HALF_LENGTH] + chunk[-HALF_LENGTH:]
        seq_list.append(chunk)
    full_seq = ''.join(seq_list)

    return full_seq


def format_output(
    region_seq, 
    t_dict, 
    non_coding=False, 
    introns=False, 
    verbose=False):
    t_info = t_dict['info']
    t_name = t_info['name']
    strand = t_info['strand']
    region = t_info['region']
    span = ':'.join(map(str, t_info['coords']))
    if non_coding is True:
        seq_coords = [t_info['coords']]
    else:
        seq_coords = t_dict['children']
    seq = get_coding_seq(region_seq, seq_coords, introns=introns)
    if strand == '-':
        # seq = reverse_complement(seq)
        seq = rev_comp(seq)
    if TRANSLATE is True:
        # seq = translate_seq(seq)
        seq = translate(seq)
    length = str(len(seq))
    gene = t_info['parent']
    if gene is None: 
        gene = t_name
    header_bits = [t_name, gene, region, strand, span, length]
    if verbose is True:
        coord_string = ','.join(
            ['-'.join(list(map(str, c))) for c in sorted(seq_coords)])
        header_bits.append(coord_string)
    header = '\t'.join(header_bits)

    return '>{}\n{}'.format(header, seq)


parser = argparse.ArgumentParser(
    description='Extract transcript/coding sequences from a '
    'genome using an annotation file',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument(
    'genome',
    help='genome file in FASTA format')
parser.add_argument(
    'annotation',
    help='annotation file in GFF[3]/GTF format')
parser.add_argument(
    '-t',
    '--translate',
    action='store_true',
    help='translate the output sequence')
parser.add_argument(
    '-e',
    '--exon',
    action='store_true',
    help='use exons instead of CDS entries to define coding sequence',
)
parser.add_argument(
    '-i',
    '--isoforms',
    help='allow multiple isoforms per gene, instead of only longest',
    action='store_true'
)
parser.add_argument(
    '-c',
    '--coord_based_isoforms',
    help=('detect isoforms by overlapping coordindates in addition to shared '
          'parent (useful for annotations without gene entries)'),
    action='store_true'
)
parser.add_argument(
    '-v',
    '--verbose_headers',
    action='store_true',
    help='include coordinate info in output headers'
)
parser.add_argument(
    '-n',
    '--non_coding',
    action='store_true',
    help=(
        'include non-coding (intronic, UTR, etc.) sequence; uses only the '
        'coordinates of the transcript itself (incompatible with --introns)')
)
parser.add_argument(
    '--introns',
    action='store_true',
    help=(
        'include intron sequences in lowercase (incompatible with -n)')
)
parser.add_argument(
    '--truncate_introns',
    type=int,
    metavar='int_length',
    help=(
        'truncate intron sequences to length {int_length} '
        '(or {int_length} -1 if odd)'
    )
)

if len(sys.argv) == 1:
    sys.exit(parser.print_help())

start = time.time()

args = parser.parse_args()

ANNOTATION = args.annotation
GENOME = args.genome
TRANSLATE = args.translate
EXON_DEF = args.exon
VERBOSE = args.verbose_headers
ISOFORMS = args.isoforms
FILTER_BY_COORDS = args.coord_based_isoforms
NON_CODING = args.non_coding
INTRONS = args.introns
INTRON_LENGTH = args.truncate_introns

if INTRONS and INTRON_LENGTH is not None:
    HALF_LENGTH = floor(INTRON_LENGTH / 2)
else:
    HALF_LENGTH = None

if NON_CODING and INTRONS:
    sys.exit('Choose either -n or --introns, but not both')

if EXON_DEF:
    child_type = 'exon'
else:
    child_type = 'cds'

child_types = ('exon', 'cds')

transcripts, child_found = get_transcripts(ANNOTATION, child_type)

# ensure there are features we can use in file
if not child_found:
    alt_child = next(c for c in child_types if c != child_type)
    print(
        '[!] No {} entries found in annotation; using {} instead'.format(
            child_type, alt_child), file=sys.stderr)
    child_type = alt_child
    transcripts, child_found = get_transcripts(ANNOTATION, child_type)
    if not child_found:
        sys.exit('[!] No {} entries found in annotation.'.format(child_type))

if not ISOFORMS:
    transcripts = longest_isoforms(transcripts, FILTER_BY_COORDS)

seq_count = 0
total_regions = len(transcripts)

for region, region_seq in fasta_parse(flex_open(GENOME)):
    if region not in transcripts:
        continue
    region_dict = transcripts[region]
    for t_name, t_dict in sorted(region_dict.items()):
        if not t_dict['children']:
            continue
        print(format_output(
            region_seq, 
            t_dict, 
            non_coding=NON_CODING, 
            introns=INTRONS, 
            verbose=VERBOSE), 
            flush=True)
        seq_count += 1
    total_regions -= 1
    if total_regions == 0:  # don't keep looping if we're done
        break

runtime = get_runtime(start)

print('[#] Extracted {} coding sequences in {}'.format(
        seq_count, runtime), file=sys.stderr)

sys.exit(0)
