#!/usr/bin/env python3

"""
usage: revcomp [-h] [-f FILE] [--no_mask] [--no_lower] [seq]

reverse-complement a nucleotide sequence

positional arguments:
  seq                   nucleotide sequence to be reverse-complemented
                        (default: None)

optional arguments:
  -h, --help            show this help message and exit
  -f FILE, --file FILE  file to reverse-complement (FASTA-compatible)
                        (default: None)
  --no_mask             don't mask non-ACTG characters with N (default: False)
  --no_lower            consider lowercase input invalid (will still reverse)
                        (default: False)
                        
"""

# authorship information
__author__ = 'Graham E. Larue'
__maintainer__ = "Graham E. Larue"
__email__ = 'egrahamlarue@gmail.com'
__license__ = 'GPL'

import sys
import argparse
from biogl import rev_comp
from fileinput import input as finput

parser = argparse.ArgumentParser(
    description='reverse-complement a nucleotide sequence',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument(
    'seq',
    nargs='?',
    help='nucleotide sequence to be reverse-complemented'
),
parser.add_argument(
    '-f',
    '--file',
    help='file to reverse-complement (FASTA-compatible)'
)
parser.add_argument(
    '--no_mask',
    action='store_true',
    help='don\'t mask non-ACTG characters with N',
    default=False),
parser.add_argument(
    '--no_lower',
    action='store_true',
    help='consider lowercase input invalid (will still reverse)',
    default=False,
)

if len(sys.argv) == 1:
    sys.exit(parser.print_help())

args = parser.parse_args()

if args.file:
    seq_input = finput(args.file)
else:
    seq_input = args.seq
    if seq_input == '-':
        seq_input = finput(seq_input)
    else:
        seq_input = [seq_input]

MASK = not args.no_mask
KEEP_LOWER = not args.no_lower

for l in seq_input:
    l = l.strip()
    if l.startswith('>'):
        print(l)
    else:
        r_seq = rev_comp(l, mask=MASK, use_lower=KEEP_LOWER)
        print(r_seq)


sys.exit(0)